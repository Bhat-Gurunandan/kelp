#!/usr/bin/perl

package Pod::Markdown::Github;

use strict;
use warnings;
use parent 'Pod::Markdown';

sub verbatim {
    my ( $parser, $paragraph, $line, $para ) = @_;

    my @lines  = split /\n/, $paragraph;
    my $indent = ' ' x 4;
    my $syntax = 'perl';
    foreach my $line (@lines) {
        next unless $line =~ m/^( +)/;

        # find the smallest indentation
        $indent = $1     if length($1) < length($indent);
        $syntax = ''     if $line =~ /^\s*\|/;
        $syntax = 'bash' if $line =~ /^\s*\%/;
    }

    if( (my $smallest = length($indent)) < 4 ){
        # invert to get what needs to be prepended
        $indent = ' ' x (4 - $smallest);
        # leave tabs alone
        $paragraph = join "\n", map { /^\t/ ? $_ : $indent . $_ } @lines;
    }

    # Remove the leading 4 spaces because we'll escape via ```language
    $paragraph = join "\n", map { s/^\s{4}//; $_ } @lines;

    if ( !$parser->{in_verbatim}++ ) {
        $paragraph = "```$syntax\n$paragraph";
    }
    $parser->_save($paragraph);
}

sub auto {
    my $self = shift;
    my @caller = caller(1);
    my $sub = $caller[3] =~ /::(\w+)$/ ? $1 : die;
    if ( $self->{in_verbatim} ) {
        $self->_save("```\n");
        $self->{in_verbatim} = 0;
    }
    eval "\$self->SUPER::$sub(\@_);";
}

sub command { shift->auto( @_) }
sub textblock { shift->auto( @_) }

package main;
use strict;
use warnings;

my $in_fh  = get_handle(shift(@ARGV), '<', \*STDIN);
my $out_fh = get_handle(shift(@ARGV), '>', \*STDOUT);

convert($in_fh, $out_fh);

close $in_fh;
close $out_fh;

sub convert {
    my ($in_file, $out_file) = @_;
    my $parser = Pod::Markdown::Github->new;
    $parser->parse_from_filehandle($in_file);
    print $out_file $parser->as_markdown;
}

sub get_handle {
  my ($path, $op, $default) = @_;
  (!defined($path) || $path eq '-') ? $default : do {
    open(my $fh, $op, $path)
      or die "Failed to open '$path': $!\n";
    $fh;
  };
}

